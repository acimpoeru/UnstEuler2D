%this script tests the compact schemes for integration which we excluded
%the initial function value f1 by slicing the matrices A and B
clear all
clc

%setting the range
x_min = 0.; x_max = 2*pi;
ii = 1;

for n = [10 30 50 80 100 150]    
    %n = 10;
    x = linspace(x_min, x_max, n)';
    dx = (x_max - x_min)/ ( n - 1.);
    
    %target function which we want to find its numerical integration
    f = sin(x);
    
    %S(n,1,[3 3],2) : the arguments are:
    %   n = length of the column
    %   1 = number of variables in system of equations
    %   [3 3] number and order of boundary scheme
    %       length([3 3]) means number of near boundary points
    %       3 means fourth-order
    %   2 = type of interior scheme: 2 means fourth-order
    %example: S(n,1,[1],1) return same thing with seond-order interior and near
    %boundary schemes. Interestingly it is trapezodial or Crank - Nicholson
    %scheme!!!
    %returns matrices [[A]] [f_tilde] = dx*([f1]*f(x1) + [[B]]*[f])
    [A B f1] = S(n,1,[7 7 7 7],4);
    
    If = dx*(A\(f1*sin(-dx) + B*f)); %numerical solution
    anl_If = -cos(x)+cos(-dx); %analytical solution,
    % note: we know that int_{-dx}^{-dx} f(x) dx = 0,
    % this give the constant of integration to be C = cos(-dx).
    
    %     plot(x,anl_If,'.',x,If,'o');
    %     xlabel('x');
    %     ylabel('f_{tilde}');
    %     legend('analytical', 'numerical');
    ER(ii) = max(abs(anl_If-If));
    DX(ii) = dx;
    display(sprintf('max(abs(error)) = %e', ER(ii)));
    ii = ii + 1;
    
end

plot(log10(DX),log10(ER));
xlabel('log_{10}(dx)');
ylabel('log_{10}(max|error|)');


%%
% WORKING -> Actually >> KINDA WORKING ;)
clear all;
clc
aa = 1;
bb = 0.7;
n = 10;
[A B f1] = S(n,1,[3 3],2);
SS = A\B;
%SS = S_Riemann(n);
v1 = ones(n,1);
v2 = zeros(1,n);
v2(end) = 1;
ii = 1;
CFL_range = linspace(0,500.,1000);
for CFL = CFL_range
    CFL = -CFL/n; %obtaining correct dt
    Sp = (eye(n)-aa/(aa+bb)*CFL*SS)\(CFL*bb/(aa+bb)*SS);
    [V,D] = eig(Sp);
    dd(ii) = max(max(abs(real(D))));
    D1 = D*inv(eye(n) - D);
    Sp = eye(n) + V*D1*inv(V);
    %Sp = real(Sp);
    
    COF = Sp*(eye(n)-aa/(aa+bb)*CFL*SS)\(v1*v2);
    amp(ii) = mean(abs(real(COF(:,end))));
    ii = ii + 1;
end
rk4 = 0.1e1 - CFL_range/n + (CFL_range/n) .^ 2 / 0.2e1 - (CFL_range/n) .^ 3 / 0.6e1 + (CFL_range/n) .^ 4 / 0.24e2;

figure(2);
loglog(CFL_range/n,rk4,'.',CFL_range/n,amp,'o',CFL_range/n, (1./(1+CFL_range/n)).^n, CFL_range/n, (abs(1-CFL_range/2/n)./abs(1+CFL_range/2/n)).^n,CFL_range/n, ones(1,length(CFL_range)),CFL_range/n,exp(-CFL_range/n));
legend('rk4-explicit','dpi4-implicit','euler implicit','crank-nicholson', 'stability bound','analytical amplification factor');
xlabel('CFL');
ylabel('Amplification factor');
grid on;
